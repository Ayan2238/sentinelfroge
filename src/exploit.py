import docker
from payloads.generator import RustPayloadGenerator

class ExploitEngine:
    def __init__(self):
        # Initialize Docker client for sandboxed testing
        self.client = docker.from_env()
        
        # Initialize Rust payload generator
        self.rust_gen = RustPayloadGenerator()

    def generate_exploit(self, target_info):
        """Generate AI-powered exploits based on target tech stack"""
        print(f"[*] Generating exploit for: {target_info['tech']}")
        
        if "PHP" in target_info["tech"]:
            return self.rust_gen.php_payload(target_info)
        elif "Node.js" in target_info["tech"]:
            return self.rust_gen.nodejs_payload(target_info)
        else:
            return self.rust_gen.universal_payload(target_info)

    def safe_test(self, payload):
        """Test exploit in a sandboxed environment"""
        print("[*] Testing exploit in Docker sandbox...")
        
        try:
            container = self.client.containers.run(
                "sandbox:latest",  # Use a secure sandbox image
                command=f"test-exploit {payload}",
                detach=True,
                remove=True
            )
            logs = container.logs()
            return logs.decode("utf-8")
        except Exception as e:
            print(f"[-] Sandbox error: {e}")
            return None

# Example usage
if __name__ == "__main__":
    exploit_engine = ExploitEngine()
    
    # Generate PHP exploit
    target_info = {"tech": "PHP", "version": "7.4"}
    payload = exploit_engine.generate_exploit(target_info)
    print(f"[+] Generated payload: {payload}")
    
    # Test exploit in sandbox
    result = exploit_engine.safe_test(payload)
    print(f"[+] Sandbox result: {result}")