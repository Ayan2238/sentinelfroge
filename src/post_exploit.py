import re
from neo4j import GraphDatabase

class LateralMovementSimulator:
    def __init__(self):
        # Initialize Neo4j driver for attack path modeling
        self.neo4j_driver = GraphDatabase.driver(
            "bolt://localhost:7687",
            auth=("neo4j", "Y9ITKFXGUwXkVkLWUs0ABpomDtQZ8SN5SOL7yqA5tMU")  # Replace with your Neo4j credentials
        )

    def simulate_attack_paths(self, entry_point):
        """Simulate lateral movement from the entry point"""
        print(f"[*] Simulating attack paths from: {entry_point}")
        
        with self.neo4j_driver.session() as session:
            paths = session.read_transaction(self._bfs_traversal, entry_point)
            prioritized_paths = self._prioritize_paths(paths)
        
        return prioritized_paths

    def _bfs_traversal(self, tx, start_node):
        """Breadth-first search for attack paths"""
        query = (
            "MATCH p=(start:Subdomain {name: $start_node})-[*1..5]->(end) "
            "WHERE end:Database OR end:Server "
            "RETURN p"
        )
        result = tx.run(query, start_node=start_node)
        return [record["p"] for record in result]

    def _prioritize_paths(self, paths):
        """Prioritize paths based on risk score"""
        return sorted(paths, key=lambda x: len(x), reverse=True)

    def detect_data_leaks(self, traffic_logs):
        """Detect sensitive data leaks in traffic logs"""
        print("[*] Analyzing traffic logs for data leaks...")
        
        # Regex patterns for PII and tokens
        pii_patterns = [
            r"\b\d{3}-\d{2}-\d{4}\b",  # SSN
            r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b",  # Email
            r"\b[A-Z]{2}\d{6}\b"  # Passport number
        ]
        
        leaks = []
        for pattern in pii_patterns:
            leaks.extend(re.findall(pattern, traffic_logs))
        
        return leaks

# Example usage
if __name__ == "__main__":
    post_exploit = LateralMovementSimulator()
    
    # Simulate attack paths
    print(post_exploit.simulate_attack_paths("web-server"))
    
    # Detect data leaks
    logs = "User email: test@example.com, SSN: 123-45-6789"
    print(post_exploit.detect_data_leaks(logs))
