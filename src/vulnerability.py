import tensorflow as tf
from transformers import pipeline
from semgrep import semgrep
import json
import re

class VulnPredictor:
    def __init__(self):
        # Load pre-trained CodeBERT model for NLP analysis
        self.nlp = pipeline("ner", model="microsoft/codebert-base")
        
        # Load anomaly detection model
        self.anomaly_model = tf.keras.models.load_model("ai_models/anomaly_detector.h5")
        
        # Load payload database
        with open("configs/payloads/xss_payloads.json") as f:
            self.payloads = json.load(f)

    def detect_zero_day(self, code_snippet):
        """Find novel vulnerabilities using ML"""
        print("[*] Analyzing code snippet for zero-day vulnerabilities...")
        
        # Step 1: Static analysis with CodeBERT
        print("[+] Running static analysis...")
        code_entities = self.nlp(code_snippet)
        
        # Step 2: Dynamic pattern recognition
        print("[+] Running anomaly detection...")
        anomaly_score = self.anomaly_model.predict([code_snippet])[0]
        
        # Step 3: Generate report
        flagged_patterns = [e["word"] for e in code_entities if e["score"] > 0.9]
        return {
            "risk_score": float(anomaly_score),
            "flagged_patterns": flagged_patterns
        }

    def api_fuzzer(self, api_endpoint):
        """Generate context-aware malicious requests"""
        print(f"[*] Fuzzing API endpoint: {api_endpoint}")
        
        # Step 1: Detect tech stack
        tech_stack = self.detect_tech_stack(api_endpoint)
        
        # Step 2: Load relevant payloads
        payloads = self.payloads.get(tech_stack, self.payloads["universal"])
        
        # Step 3: Craft malicious requests
        malicious_requests = []
        for payload in payloads:
            request = self._craft_payload(payload, api_endpoint)
            malicious_requests.append(request)
        
        return malicious_requests

    def detect_tech_stack(self, endpoint):
        """Detect the technology stack of the API"""
        # Example: Simple regex-based detection
        if re.search(r"\.php", endpoint):
            return "php"
        elif re.search(r"\.aspx", endpoint):
            return "aspnet"
        else:
            return "universal"

    def _craft_payload(self, payload, endpoint):
        """Adapt payload to the target endpoint"""
        if "php" in self.detect_tech_stack(endpoint):
            return f"{endpoint}?input={payload}"
        else:
            return f"{endpoint}/{payload}"

# Example usage
if __name__ == "__main__":
    scanner = VulnPredictor()
    
    # Test zero-day detection
    code = """
    function login(username, password) {
        query = "SELECT * FROM users WHERE username='" + username + "'";
        execute(query);
    }
    """
    print(scanner.detect_zero_day(code))
    
    # Test API fuzzing
    print(scanner.api_fuzzer("http://example.com/api/v1/login"))